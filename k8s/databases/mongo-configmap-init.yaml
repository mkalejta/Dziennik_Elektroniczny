apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init-script
data:
  init-mongo.js: |
    db = db.getSiblingDB('gradebookDB');

    // Funkcja do generowania losowych haseł
    function generatePassword(length = 12) {
      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()';
      let password = '';
      for (let i = 0; i < length; i++) {
        password += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return password;
    }

    // Listy imion i nazwisk
    const maleFirstNames = ['Jan', 'Piotr', 'Michał', 'Krzysztof', 'Tomasz', 'Paweł', 'Adam', 'Marcin', 'Łukasz', 'Mateusz'];
    const femaleFirstNames = ['Anna', 'Katarzyna', 'Maria', 'Magdalena', 'Joanna', 'Agnieszka', 'Ewa', 'Monika', 'Barbara', 'Aleksandra'];
    const lastNames = ['Kowalski', 'Nowak', 'Wiśniewski', 'Wójcik', 'Kowalczyk', 'Kamiński', 'Lewandowski', 'Zieliński', 'Szymański', 'Woźniak'];

    // Funkcja do generowania losowego imienia i nazwiska
    function generateFullName(isMale) {
      const firstName = isMale
        ? maleFirstNames[Math.floor(Math.random() * maleFirstNames.length)]
        : femaleFirstNames[Math.floor(Math.random() * femaleFirstNames.length)];
      let lastName = lastNames[Math.floor(Math.random() * lastNames.length)];

      // Jeśli użytkownik jest kobietą i nazwisko kończy się na "ski", zmień końcówkę na "ska"
      if (!isMale && lastName.endsWith('ski')) {
        lastName = lastName.slice(0, -1) + 'a';
      }

      return `${firstName} ${lastName}`;
    }

    // USERS COLLECTION
    db.createCollection('users');

    // Admin
    db.users.insertOne({
      _id: 'admin1',
      name: 'Admin',
      surname: 'User',
      role: 'admin',
    });

    // Students
    const students = [];
    for (let i = 1; i <= 40; i++) {
      const isMale = i <= 20;
      const fullName = generateFullName(isMale).split(" ");
      students.push({
        _id: `student${i}`,
        name: fullName[0],
        surname: fullName[1],
        role: 'student',
      });
    }
    db.users.insertMany(students);

    // Parents
    const parents = [];
    for (let i = 1; i <= 40; i++) {
      const isMale = i <= 20;
      const fullName = generateFullName(isMale).split(" ");
      parents.push({
        _id: `parent${i}`,
        name: fullName[0],
        surname: fullName[1],
        role: 'parent',
      });
    }
    db.users.insertMany(parents);

    // Teachers
    const teachers = [];
    for (let i = 1; i <= 20; i++) {
      const isMale = i <= 10;
      const fullName = generateFullName(isMale).split(" ");
      teachers.push({
        _id: `teacher${i}`,
        name: fullName[0],
        surname: fullName[1],
        role: 'teacher',
      });
    }
    db.users.insertMany(teachers);

    // ATTENDANCE COLLECTION
    db.createCollection('attendance');

    // MESSAGES COLLECTION
    db.createCollection('messages');

    db.createCollection('parent_child');

    // Parent-Child
    const parentChildConnections = [];
    for (let i = 1; i <= 40; i++) {
      parentChildConnections.push({
        parentId: `parent${i}`,
        childId: `student${i}`,
      });
    }
    db.parent_child.insertMany(parentChildConnections);
    